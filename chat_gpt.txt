Para criar um site simples utilizando o GitHub Pages e integrá-lo a uma tabela do Google Sheets para permitir que as pessoas escolham os presentes para um chá de casa nova, você pode seguir os passos abaixo.

Passo 1: Criar o Google Sheets
Primeiro, vamos criar a tabela no Google Sheets que será usada para armazenar as informações dos presentes. Essa tabela vai conter pelo menos duas colunas:

Nome: para a pessoa que vai dar o presente.
Presente: para o nome do presente escolhido.
Aqui estão as etapas para criar e configurar a planilha:

Crie uma nova planilha no Google Sheets.
Dê um nome a ela, como "Lista de Presentes Chá de Casa Nova".
Na primeira linha da planilha, coloque os seguintes títulos nas colunas:
Nome na célula A1
Presente na célula B1
Agora você precisa tornar essa planilha acessível via API para ler e escrever dados. Para isso, você vai utilizar o Google Sheets API ou, de maneira mais simples, o serviço "Google Sheets as JSON" através de uma URL pública.
Passo 2: Publicar a Planilha como uma API
Com a planilha aberta, clique em Arquivo > Publicar na web.

Escolha "Planilha inteira" e clique em "Publicar".

Agora, obtenha a URL para acessar a planilha em formato JSON. Para fazer isso, você pode usar o seguinte formato de URL para acessar os dados da planilha:

bash
Copiar código
https://spreadsheets.google.com/feeds/list/[ID_DA_PLANILHA]/od6/public/values?alt=json
Onde [ID_DA_PLANILHA] é o identificador único da planilha, que pode ser extraído da URL da planilha no Google Sheets.

https://docs.google.com/spreadsheets/d/e/2PACX-1vQ2qVv20I81lpkpuqeBwpDSyQ9iFi9Cfo8F6hjWG-DW0ThPUn3AqnUriGrilzFxCS7ToBsaTP6-o8y0/pubhtml
Exemplo de URL de acesso:

bash
Copiar código
https://spreadsheets.google.com/feeds/list/1A2B3C4D5E6F7G8H9I0J/od6/public/values?alt=json
Passo 3: Criar o repositório no GitHub
Vá para o GitHub e crie um novo repositório.
No nome do repositório, use algo como cha-de-casa-nova.
Após criar o repositório, ative o GitHub Pages nas configurações do repositório:
Vá até as configurações do repositório.
Na seção GitHub Pages, escolha a branch main (ou master) e a pasta /root para a origem do conteúdo.
Passo 4: Criar o arquivo HTML
Agora, vamos criar o arquivo index.html, que será o site onde os convidados poderão escolher os presentes.

Crie um arquivo index.html no seu repositório e adicione o seguinte código:

html
Copiar código
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chá de Casa Nova</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
        }
        table {
            width: 100%;
            margin: 20px auto;
            border-collapse: collapse;
            background-color: #fff;
        }
        th, td {
            padding: 8px 12px;
            border: 1px solid #ccc;
        }
        th {
            background-color: #eee;
        }
        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            font-size: 16px;
        }
        input[type="text"] {
            padding: 8px;
            width: 200px;
            margin: 10px;
        }
    </style>
</head>
<body>
    <h1>Lista de Presentes - Chá de Casa Nova</h1>
    <p>Escolha o presente que você deseja dar para o chá de casa nova:</p>

    <form id="present-form">
        <input type="text" id="name" placeholder="Seu nome" required>
        <input type="text" id="gift" placeholder="Presente" required>
        <button type="submit">Adicionar</button>
    </form>

    <h2>Presentes já escolhidos:</h2>
    <table id="gift-table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Presente</th>
            </tr>
        </thead>
        <tbody>
            <!-- Dados da planilha serão inseridos aqui -->
        </tbody>
    </table>

    <script>
        // URL da planilha em formato JSON
        const sheetUrl = "https://spreadsheets.google.com/feeds/list/[ID_DA_PLANILHA]/od6/public/values?alt=json";

        // Função para carregar os dados da planilha
        function loadData() {
            fetch(sheetUrl)
                .then(response => response.json())
                .then(data => {
                    const tableBody = document.querySelector('#gift-table tbody');
                    tableBody.innerHTML = ""; // Limpar dados antigos
                    data.feed.entry.forEach(entry => {
                        const name = entry.gsx$nome.$t;
                        const gift = entry.gsx$presente.$t;
                        const row = document.createElement('tr');
                        row.innerHTML = `<td>${name}</td><td>${gift}</td>`;
                        tableBody.appendChild(row);
                    });
                })
                .catch(error => console.error("Erro ao carregar dados:", error));
        }

        // Função para adicionar presente
        document.getElementById("present-form").addEventListener("submit", function(event) {
            event.preventDefault();
            const name = document.getElementById("name").value;
            const gift = document.getElementById("gift").value;

            // Aqui você pode integrar uma API para salvar os dados na planilha do Google
            // No caso de uma planilha pública, você não conseguirá fazer isso diretamente, 
            // então você precisará de um backend para enviar os dados para a API do Google Sheets.

            alert("Presente adicionado!");  // Apenas uma mensagem por enquanto
            loadData();  // Recarregar os dados da planilha
        });

        // Carregar os dados ao carregar a página
        window.onload = loadData;
    </script>
</body>
</html>
Passo 5: Explicando o Código
HTML:

A estrutura básica do HTML inclui um título, um formulário para coletar o nome e o presente, e uma tabela para exibir os dados da planilha.
CSS:

O estilo da página é simples, com a tabela centralizada e alguns estilos para o botão e os campos de entrada.
JavaScript:

A função loadData faz uma requisição fetch à URL pública da planilha, que retorna os dados no formato JSON.
Os dados são inseridos na tabela com a ajuda de JavaScript, exibindo os nomes e os presentes escolhidos.
O formulário de presente (#present-form) permite que o usuário insira o nome e o presente, mas, por enquanto, ele apenas exibe um alerta, pois a integração para adicionar dados ao Google Sheets exigiria uma API backend.
Passo 6: Publicar no GitHub Pages
Faça o commit do código no seu repositório GitHub.
Acesse a URL do GitHub Pages (algo como https://seuusuario.github.io/cha-de-casa-nova/).
O site estará pronto para ser acessado!
Passo 7: Integração para Adicionar Dados ao Google Sheets
A parte mais complicada é fazer com que os dados sejam enviados para o Google Sheets diretamente do site. Para isso, você precisaria de um backend em Node.js ou outra tecnologia para lidar com a autenticação e envio de dados à API do Google Sheets.

Neste caso, a maneira mais simples de mostrar os dados seria apenas exibir os presentes já escolhidos, e permitir o envio com um backend futuramente.

